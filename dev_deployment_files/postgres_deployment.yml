apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-statefulset
  namespace: bulkintel-dev
spec:
  serviceName: "postgres-service"
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
      annotations:
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/role: 'bulkintel-role'
        vault.hashicorp.com/agent-inject-secret-config: 'key-value/data/bulkintel-dev'
        vault.hashicorp.com/agent-pre-populate: "true"
        vault.hashicorp.com/agent-init-first: "true"
        # Environment variable export template
        vault.hashicorp.com/agent-inject-template-config: |
          {{- with secret "key-value/data/bulkintel" -}}
            export POSTGRES_DB="{{ .Data.data.POSTGRES_DB }}"
            export POSTGRES_PASSWORD="{{ .Data.data.POSTGRES_PASSWORD }}"
            export POSTGRES_USER="{{ .Data.data.POSTGRES_USER }}"
          {{- end }}
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
      serviceAccountName: bulkintel-vault-sa
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          securityContext:
            runAsUser: 0          # need root to chown
            runAsGroup: 0
            allowPrivilegeEscalation: false
          command: [ "sh", "-c" ]
          args:
            - |
              set -e
              mkdir -p /var/lib/postgresql/data
              # only chown if needed (faster on restarts)
              cur="$(stat -c '%u:%g' /var/lib/postgresql/data || echo 0:0)"
              if [ "$cur" != "999:999" ]; then
                chown -R 999:999 /var/lib/postgresql/data
              fi
              chmod 700 /var/lib/postgresql/data || true
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      containers:
      - name: postgres
        image: postgres:16
        securityContext:
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
        command: ["/bin/bash", "-ec"]
        args:
          - |
            source /vault/secrets/config          # ← loads envs
            exec docker-entrypoint.sh postgres   # ← original entrypoint
        resources:
          requests:
            memory: "334Mi"
            cpu: "50m"
          limits:
            memory: "334Mi"
            cpu: "80m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -ec
              - |
                source /vault/secrets/config
                PGHOST=127.0.0.1 pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"
          initialDelaySeconds: 80
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -ec
              - |
                source /vault/secrets/config
                PGHOST=127.0.0.1 pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB"
          initialDelaySeconds: 80
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
        namespace: bulkintel-dev
      spec:
        accessModes: ["ReadWriteMany"]
        storageClassName: nfs-csi
        resources:
          requests:
            storage: 5Gi